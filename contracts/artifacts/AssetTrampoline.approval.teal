#pragma version 10

// This TEAL was generated by TEALScript v0.81.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// optInToAsa(pay,asset)void
abi_route_optInToAsa:
	// asset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute optInToAsa(pay,asset)void
	callsub optInToAsa
	int 1
	return

// optInToAsa(payTxn: PayTxn, asset: Asset): void
optInToAsa:
	proto 2 0

	// contracts/AssetTrampoline.algo.ts:61
	// verifyPayTxn(payTxn, {
	//       receiver: globals.currentApplicationAddress,
	//     })
	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/AssetTrampoline.algo.ts:64
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       sender: globals.currentApplicationAddress,
	//       assetReceiver: globals.currentApplicationAddress,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/AssetTrampoline.algo.ts:65
	// xferAsset: asset
	frame_dig -2 // asset: Asset
	itxn_field XferAsset

	// contracts/AssetTrampoline.algo.ts:66
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/AssetTrampoline.algo.ts:67
	// sender: globals.currentApplicationAddress
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/AssetTrampoline.algo.ts:68
	// assetReceiver: globals.currentApplicationAddress
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// openOrder(pay,axfer,asset,uint64,uint64)uint64
abi_route_openOrder:
	// The ABI return prefix
	byte 0x151f7c75

	// buyQuant: uint64
	txna ApplicationArgs 3
	btoi

	// sellQuant: uint64
	txna ApplicationArgs 2
	btoi

	// buyAsset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// assetTransfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// payTxn: pay
	txn GroupIndex
	int 2
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute openOrder(pay,axfer,asset,uint64,uint64)uint64
	callsub openOrder
	itob
	concat
	log
	int 1
	return

// openOrder(payTxn: PayTxn, assetTransfer: AssetTransferTxn, buyAsset: Asset, sellQuant: uint64, buyQuant: uint64): Application
openOrder:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/AssetTrampoline.algo.ts:80
	// verifyPayTxn(payTxn, {
	//       receiver: globals.currentApplicationAddress,
	//       amount: 1_000_001,
	//     })
	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	int 1_000_001
	==
	assert

	// contracts/AssetTrampoline.algo.ts:85
	// assert(globals.currentApplicationAddress.isOptedInToAsset(assetTransfer.xferAsset))
	global CurrentApplicationAddress
	frame_dig -2 // assetTransfer: AssetTransferTxn
	gtxns XferAsset
	asset_holding_get AssetBalance
	swap
	pop
	assert

	// contracts/AssetTrampoline.algo.ts:86
	// verifyAssetTransferTxn(assetTransfer, {
	//       assetReceiver: globals.currentApplicationAddress,
	//     })
	// verify assetReceiver
	frame_dig -2 // assetTransfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/AssetTrampoline.algo.ts:91
	// orderAddress = sendMethodCall<[Asset, Asset, uint64, uint64, Account], Address>({
	//       name: 'createApplication',
	//       clearStateProgram: ChildContract.clearProgram(),
	//       approvalProgram: ChildContract.approvalProgram(),
	//       methodArgs: [assetTransfer.xferAsset, buyAsset, sellQuant, buyQuant, assetTransfer.sender],
	//       globalNumByteSlice: ChildContract.schema.global.numByteSlice,
	//       globalNumUint: ChildContract.schema.global.numUint,
	//       localNumByteSlice: ChildContract.schema.local.numByteSlice,
	//       localNumUint: ChildContract.schema.local.numUint,
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "createApplication(asset,asset,uint64,uint64,account)address"
	itxn_field ApplicationArgs

	// contracts/AssetTrampoline.algo.ts:93
	// clearStateProgram: ChildContract.clearProgram()
	byte b64 Cg==
	itxn_field ClearStateProgram

	// contracts/AssetTrampoline.algo.ts:94
	// approvalProgram: ChildContract.approvalProgram()
	byte b64 CiADAAEEJgUHY3JlYXRvcglzZWxsQXNzZXQIYnV5QXNzZXQJc2VsbFF1YW50CGJ1eVF1YW50MRgUgQYLMRkIjQwBIwAAAAAAAAAAAAABFQAAAAAAAAAAAAAAigEBi/8rZB0iJwRkH0hITBREiYAEFR98dTYaBRfAHDYaBBc2GgMXNhoCF8AwNhoBF8AwiAAEULAjQ4oFASmL/2cqi/5nK4v9ZycEi/xnKIv7ZzIKiTYaARfAMIgAAiNDigEAsSSyEIv/shEishIyCrIAMgqyFCKyAbOJNhoDF8AcNhoCF8AwNhoBF8AwMRYjCUk4ECQSRIgAAiNDigQAgACL/zgRKmQSRIv/OBGL/RJEKWSL/hJEKGSL/BJEi/84AIv+cABMSESL/zgSiP8xjAAyCilkcABIiwAPRChkKmRwAExIRLEkshCL/zgRshGL/zgSshIoZLIUIrIBs7EkshCL/rIRiwCyEov/OACyFCKyAbOJgASBo0YGNhoAjgH+8gCABKgFAA6ABIyr0sM2GgCOAv8e/0QA
	itxn_field ApprovalProgram

	// contracts/AssetTrampoline.algo.ts:95
	// methodArgs: [assetTransfer.xferAsset, buyAsset, sellQuant, buyQuant, assetTransfer.sender]
	frame_dig -2 // assetTransfer: AssetTransferTxn
	gtxns XferAsset
	itxn_field Assets
	byte 0x0000000000000000
	itxn_field ApplicationArgs
	frame_dig -3 // buyAsset: Asset
	itxn_field Assets
	byte 0x0000000000000001
	itxn_field ApplicationArgs
	frame_dig -4 // sellQuant: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -5 // buyQuant: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -2 // assetTransfer: AssetTransferTxn
	gtxns Sender
	itxn_field Accounts
	byte 0x0000000000000001
	itxn_field ApplicationArgs

	// contracts/AssetTrampoline.algo.ts:96
	// globalNumByteSlice: ChildContract.schema.global.numByteSlice
	int 1
	itxn_field GlobalNumByteSlice

	// contracts/AssetTrampoline.algo.ts:97
	// globalNumUint: ChildContract.schema.global.numUint
	int 4
	itxn_field GlobalNumUint

	// contracts/AssetTrampoline.algo.ts:98
	// localNumByteSlice: ChildContract.schema.local.numByteSlice
	int 0
	itxn_field LocalNumByteSlice

	// contracts/AssetTrampoline.algo.ts:99
	// localNumUint: ChildContract.schema.local.numUint
	int 0
	itxn_field LocalNumUint

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // orderAddress: address

	// contracts/AssetTrampoline.algo.ts:102
	// childAppId = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury 1 // childAppId: application

	// contracts/AssetTrampoline.algo.ts:103
	// sendPayment({
	//       receiver: childAppId.address,
	//       amount: payTxn.amount,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/AssetTrampoline.algo.ts:104
	// receiver: childAppId.address
	frame_dig 1 // childAppId: application
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts/AssetTrampoline.algo.ts:105
	// amount: payTxn.amount
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/AssetTrampoline.algo.ts:108
	// sendMethodCall<[Asset], void>({
	//       name: 'triggerOptIn',
	//       applicationID: childAppId,
	//       methodArgs: [assetTransfer.xferAsset],
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "triggerOptIn(asset)void"
	itxn_field ApplicationArgs

	// contracts/AssetTrampoline.algo.ts:110
	// applicationID: childAppId
	frame_dig 1 // childAppId: application
	itxn_field ApplicationID

	// contracts/AssetTrampoline.algo.ts:111
	// methodArgs: [assetTransfer.xferAsset]
	frame_dig -2 // assetTransfer: AssetTransferTxn
	gtxns XferAsset
	itxn_field Assets
	byte 0x0000000000000000
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/AssetTrampoline.algo.ts:113
	// sendAssetTransfer({
	//       xferAsset: assetTransfer.xferAsset,
	//       assetReceiver: childAppId.address,
	//       assetAmount: assetTransfer.assetAmount,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/AssetTrampoline.algo.ts:114
	// xferAsset: assetTransfer.xferAsset
	frame_dig -2 // assetTransfer: AssetTransferTxn
	gtxns XferAsset
	itxn_field XferAsset

	// contracts/AssetTrampoline.algo.ts:115
	// assetReceiver: childAppId.address
	frame_dig 1 // childAppId: application
	app_params_get AppAddress
	pop
	itxn_field AssetReceiver

	// contracts/AssetTrampoline.algo.ts:116
	// assetAmount: assetTransfer.assetAmount
	frame_dig -2 // assetTransfer: AssetTransferTxn
	gtxns AssetAmount
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/AssetTrampoline.algo.ts:119
	// return childAppId;
	frame_dig 1 // childAppId: application

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "optInToAsa(pay,asset)void"
	method "openOrder(pay,axfer,asset,uint64,uint64)uint64"
	txna ApplicationArgs 0
	match abi_route_optInToAsa abi_route_openOrder
	err