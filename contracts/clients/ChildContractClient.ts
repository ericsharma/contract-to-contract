/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(asset,asset,uint64,uint64,account)address": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "triggerOptIn(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setCreator(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "sellAsset": {
          "type": "uint64",
          "key": "sellAsset"
        },
        "buyAsset": {
          "type": "uint64",
          "key": "buyAsset"
        },
        "buyQuant": {
          "type": "uint64",
          "key": "buyQuant"
        },
        "sellQuant": {
          "type": "uint64",
          "key": "sellQuant"
        },
        "creator": {
          "type": "bytes",
          "key": "creator"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjgxLjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbG1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICJOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggY2FsbF9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY3JlYXRlX05vT3AgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRAoKTk9UX0lNUExFTUVOVEVEOgoJZXJyCgovLyBjYWxjdWxhdGVSZXR1cm5BbW91bnQoYnV5QW10OiB1aW50NjQpOiB1aW50NjQKY2FsY3VsYXRlUmV0dXJuQW1vdW50OgoJcHJvdG8gMSAxCgoJLy8gY29udHJhY3RzL0Fzc2V0VHJhbXBvbGluZS5hbGdvLnRzOjE2CgkvLyByZXR1cm4gd2lkZVJhdGlvKFtidXlBbXQsIHRoaXMuc2VsbFF1YW50LnZhbHVlXSwgW3RoaXMuYnV5UXVhbnQudmFsdWVdKTsKCWZyYW1lX2RpZyAtMSAvLyBidXlBbXQ6IHVpbnQ2NAoJYnl0ZSAweDczNjU2YzZjNTE3NTYxNmU3NCAvLyAic2VsbFF1YW50IgoJYXBwX2dsb2JhbF9nZXQKCW11bHcKCWludCAwCglieXRlIDB4NjI3NTc5NTE3NTYxNmU3NCAvLyAiYnV5UXVhbnQiCglhcHBfZ2xvYmFsX2dldAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCWFzc2VydAoJcmV0c3ViCgovLyBjcmVhdGVBcHBsaWNhdGlvbihhc3NldCxhc3NldCx1aW50NjQsdWludDY0LGFjY291bnQpYWRkcmVzcwphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGNyZWF0b3I6IGFjY291bnQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWJ0b2kKCXR4bmFzIEFjY291bnRzCgoJLy8gYnV5UXVhbnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJYnRvaQoKCS8vIHNlbGxRdWFudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gYnV5QXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBzZWxsQXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKGFzc2V0LGFzc2V0LHVpbnQ2NCx1aW50NjQsYWNjb3VudClhZGRyZXNzCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24oc2VsbEFzc2V0OiBBc3NldCwgYnV5QXNzZXQ6IEFzc2V0LCBzZWxsUXVhbnQ6IHVpbnQ2NCwgYnV5UXVhbnQ6IHVpbnQ2NCwgY3JlYXRvcjogQWNjb3VudCk6IEFkZHJlc3MKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byA1IDEKCgkvLyBjb250cmFjdHMvQXNzZXRUcmFtcG9saW5lLmFsZ28udHM6MjAKCS8vIHRoaXMuc2VsbEFzc2V0LnZhbHVlID0gc2VsbEFzc2V0CglieXRlIDB4NzM2NTZjNmM0MTczNzM2NTc0IC8vICJzZWxsQXNzZXQiCglmcmFtZV9kaWcgLTEgLy8gc2VsbEFzc2V0OiBBc3NldAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQXNzZXRUcmFtcG9saW5lLmFsZ28udHM6MjEKCS8vIHRoaXMuYnV5QXNzZXQudmFsdWUgPSBidXlBc3NldAoJYnl0ZSAweDYyNzU3OTQxNzM3MzY1NzQgLy8gImJ1eUFzc2V0IgoJZnJhbWVfZGlnIC0yIC8vIGJ1eUFzc2V0OiBBc3NldAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQXNzZXRUcmFtcG9saW5lLmFsZ28udHM6MjIKCS8vIHRoaXMuc2VsbFF1YW50LnZhbHVlID0gc2VsbFF1YW50CglieXRlIDB4NzM2NTZjNmM1MTc1NjE2ZTc0IC8vICJzZWxsUXVhbnQiCglmcmFtZV9kaWcgLTMgLy8gc2VsbFF1YW50OiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0Fzc2V0VHJhbXBvbGluZS5hbGdvLnRzOjIzCgkvLyB0aGlzLmJ1eVF1YW50LnZhbHVlID0gYnV5UXVhbnQKCWJ5dGUgMHg2Mjc1Nzk1MTc1NjE2ZTc0IC8vICJidXlRdWFudCIKCWZyYW1lX2RpZyAtNCAvLyBidXlRdWFudDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Bc3NldFRyYW1wb2xpbmUuYWxnby50czoyNAoJLy8gdGhpcy5jcmVhdG9yLnZhbHVlID0gY3JlYXRvcgoJYnl0ZSAweDYzNzI2NTYxNzQ2ZjcyIC8vICJjcmVhdG9yIgoJZnJhbWVfZGlnIC01IC8vIGNyZWF0b3I6IEFjY291bnQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0Fzc2V0VHJhbXBvbGluZS5hbGdvLnRzOjI2CgkvLyByZXR1cm4gdGhpcy5hcHAuYWRkcmVzczsKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglyZXRzdWIKCi8vIHRyaWdnZXJPcHRJbihhc3NldCl2b2lkCmFiaV9yb3V0ZV90cmlnZ2VyT3B0SW46CgkvLyBhc3NldDogYXNzZXQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFzc2V0cwoKCS8vIGV4ZWN1dGUgdHJpZ2dlck9wdEluKGFzc2V0KXZvaWQKCWNhbGxzdWIgdHJpZ2dlck9wdEluCglpbnQgMQoJcmV0dXJuCgovLyB0cmlnZ2VyT3B0SW4oYXNzZXQ6IEFzc2V0KTogdm9pZAp0cmlnZ2VyT3B0SW46Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvQXNzZXRUcmFtcG9saW5lLmFsZ28udHM6MzEKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIC8vIHhmZXJBc3NldDogdGhpcy5Bc3NldC52YWx1ZSwKCS8vICAgICAgIHhmZXJBc3NldDogYXNzZXQsCgkvLyAgICAgICBhc3NldEFtb3VudDogMCwKCS8vICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9Bc3NldFRyYW1wb2xpbmUuYWxnby50czozMwoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBBc3NldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHMvQXNzZXRUcmFtcG9saW5lLmFsZ28udHM6MzQKCS8vIGFzc2V0QW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9Bc3NldFRyYW1wb2xpbmUuYWxnby50czozNQoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBjb250cmFjdHMvQXNzZXRUcmFtcG9saW5lLmFsZ28udHM6MzYKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIHNldENyZWF0b3IoYWNjb3VudCl2b2lkCmFiaV9yb3V0ZV9zZXRDcmVhdG9yOgoJLy8gc2VuZGVyOiBhY2NvdW50Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBY2NvdW50cwoKCS8vIGV4ZWN1dGUgc2V0Q3JlYXRvcihhY2NvdW50KXZvaWQKCWNhbGxzdWIgc2V0Q3JlYXRvcgoJaW50IDEKCXJldHVybgoKLy8gc2V0Q3JlYXRvcihzZW5kZXI6IEFjY291bnQpOiB2b2lkCnNldENyZWF0b3I6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvQXNzZXRUcmFtcG9saW5lLmFsZ28udHM6NDEKCS8vIHRoaXMuY3JlYXRvci52YWx1ZSA9IHNlbmRlcgoJYnl0ZSAweDYzNzI2NTYxNzQ2ZjcyIC8vICJjcmVhdG9yIgoJZnJhbWVfZGlnIC0xIC8vIHNlbmRlcjogQWNjb3VudAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKY3JlYXRlX05vT3A6CgltZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKGFzc2V0LGFzc2V0LHVpbnQ2NCx1aW50NjQsYWNjb3VudClhZGRyZXNzIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgllcnIKCmNhbGxfTm9PcDoKCW1ldGhvZCAidHJpZ2dlck9wdEluKGFzc2V0KXZvaWQiCgltZXRob2QgInNldENyZWF0b3IoYWNjb3VudCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX3RyaWdnZXJPcHRJbiBhYmlfcm91dGVfc2V0Q3JlYXRvcgoJZXJy",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ChildContract",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "sellAsset",
            "type": "asset"
          },
          {
            "name": "buyAsset",
            "type": "asset"
          },
          {
            "name": "sellQuant",
            "type": "uint64"
          },
          {
            "name": "buyQuant",
            "type": "uint64"
          },
          {
            "name": "creator",
            "type": "account"
          }
        ],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "triggerOptIn",
        "args": [
          {
            "name": "asset",
            "type": "asset"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setCreator",
        "args": [
          {
            "name": "sender",
            "type": "account"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the ChildContract smart contract.
 */
export type ChildContract = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(asset,asset,uint64,uint64,account)address' | 'createApplication', {
      argsObj: {
        sellAsset: number | bigint
        buyAsset: number | bigint
        sellQuant: bigint | number
        buyQuant: bigint | number
        creator: string | Uint8Array
      }
      argsTuple: [sellAsset: number | bigint, buyAsset: number | bigint, sellQuant: bigint | number, buyQuant: bigint | number, creator: string | Uint8Array]
      returns: string
    }>
    & Record<'triggerOptIn(asset)void' | 'triggerOptIn', {
      argsObj: {
        asset: number | bigint
      }
      argsTuple: [asset: number | bigint]
      returns: void
    }>
    & Record<'setCreator(account)void' | 'setCreator', {
      argsObj: {
        sender: string | Uint8Array
      }
      argsTuple: [sender: string | Uint8Array]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'sellAsset'?: IntegerState
      'buyAsset'?: IntegerState
      'buyQuant'?: IntegerState
      'sellQuant'?: IntegerState
      'creator'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type ChildContractSig = keyof ChildContract['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ChildContractSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the ChildContract smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ChildContractSig> = ChildContract['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ChildContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ChildContractSig> = ChildContract['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ChildContractCreateCalls = (typeof ChildContractCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ChildContractCreateCallParams =
  | (TypedCallParams<'createApplication(asset,asset,uint64,uint64,account)address'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type ChildContractDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ChildContractCreateCalls) => ChildContractCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ChildContractCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the ChildContract smart contract using the createApplication(asset,asset,uint64,uint64,account)address ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(asset,asset,uint64,uint64,account)address'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(asset,asset,uint64,uint64,account)address' as const,
          methodArgs: Array.isArray(args) ? args : [args.sellAsset, args.buyAsset, args.sellQuant, args.buyQuant, args.creator],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the triggerOptIn(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static triggerOptIn(args: MethodArgs<'triggerOptIn(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'triggerOptIn(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setCreator(account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setCreator(args: MethodArgs<'setCreator(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setCreator(account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.sender],
      ...params,
    }
  }
}

/**
 * A client to make calls to the ChildContract smart contract
 */
export class ChildContractClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ChildContractClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ChildContract['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the ChildContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ChildContractDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ChildContractCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the ChildContract smart contract using the createApplication(asset,asset,uint64,uint64,account)address ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(asset,asset,uint64,uint64,account)address'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(asset,asset,uint64,uint64,account)address'>>> {
        return $this.mapReturnValue(await $this.appClient.create(ChildContractCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the ChildContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the triggerOptIn(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public triggerOptIn(args: MethodArgs<'triggerOptIn(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ChildContractCallFactory.triggerOptIn(args, params))
  }

  /**
   * Calls the setCreator(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setCreator(args: MethodArgs<'setCreator(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ChildContractCallFactory.setCreator(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<ChildContract['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get sellAsset() {
        return ChildContractClient.getIntegerState(state, 'sellAsset')
      },
      get buyAsset() {
        return ChildContractClient.getIntegerState(state, 'buyAsset')
      },
      get buyQuant() {
        return ChildContractClient.getIntegerState(state, 'buyQuant')
      },
      get sellQuant() {
        return ChildContractClient.getIntegerState(state, 'sellQuant')
      },
      get creator() {
        return ChildContractClient.getBinaryState(state, 'creator')
      },
    }
  }

  public compose(): ChildContractComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      triggerOptIn(args: MethodArgs<'triggerOptIn(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.triggerOptIn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setCreator(args: MethodArgs<'setCreator(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setCreator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate() {
        await promiseChain
        const result = await atc.simulate(client.algod)
        return result
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ChildContractComposer
  }
}
export type ChildContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the triggerOptIn(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  triggerOptIn(args: MethodArgs<'triggerOptIn(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ChildContractComposer<[...TReturns, MethodReturn<'triggerOptIn(asset)void'>]>

  /**
   * Calls the setCreator(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setCreator(args: MethodArgs<'setCreator(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ChildContractComposer<[...TReturns, MethodReturn<'setCreator(account)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the ChildContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): ChildContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ChildContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ChildContractComposerSimulateResult>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<ChildContractComposerResults<TReturns>>
}
export type ChildContractComposerSimulateResult = {
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type ChildContractComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
